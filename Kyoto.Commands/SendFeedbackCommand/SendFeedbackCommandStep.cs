using Kyoto.Domain.CommandSystem;
using Kyoto.Domain.FeedbackSystem;
using Kyoto.Domain.PostSystem.Interfaces;
using Kyoto.Extensions;
using Kyoto.Services.CommandSystem;

namespace Kyoto.Commands.SendFeedbackCommand;

public class SendFeedbackCommandStep : BaseCommandStep
{
    private readonly IPostService _postService;
    private readonly IFeedbackRepository _feedbackRepository;
    
    public SendFeedbackCommandStep(IPostService postService, IFeedbackRepository feedbackRepository)
    {
        _postService = postService;
        _feedbackRepository = feedbackRepository;
    }

    protected override async Task<CommandStepResult> SetActionRequestAsync()
    {
        if (!await _feedbackRepository.IsFeedbackEnableAsync())
        {
            await _postService.SendTextMessageAsync(Session, "üòû –ù–∞–∂–∞–ª—å –≤–ª–∞—Å–Ω–∏–∫ –Ω–µ —É–≤—ñ–º–∫–Ω—É–≤ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–±–æ—Ä—É —Ñ—ñ–¥–±–µ–∫—É");
            return CommandStepResult.CreateInterrupt();
        }
        
        await _postService.SendTextMessageAsync(Session, "‚úçÔ∏è –ù–∞–ø—ñ—à–∏—Ç—å –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:");
        return CommandStepResult.CreateSuccessful();
    }

    protected override Task<CommandStepResult> SetProcessResponseAsync()
    {
        var feedbackData = new FeedbackData(CommandContext.Message!.Text!);
        CommandContext.SetAdditionalData(feedbackData.ToJson());
        return Task.FromResult(CommandStepResult.CreateSuccessful());
    }
}